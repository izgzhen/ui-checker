//////------------ Input Facts ------------//////

// View ID
.number_type ViewID

// Dimension related
// https://stackoverflow.com/questions/2025282/what-is-the-difference-between-px-dip-dp-and-sp
.number_type DIP        // Density-independent Pixels
.number_type SP         // Scale-independent Pixels
.symbol_type Dimension  // "fill_parent", "wrap_content"

.symbol_type Class
.symbol_type IdName
.symbol_type Color
.symbol_type Method
.symbol_type Event
.symbol_type String

////------------ Predicates From UI Analyzer ------------////
//------ View Attributes ------//
// https://developer.android.com/reference/android/view/View#attr_android:id
.decl idName(name: IdName, v: ViewID)
.input idName

// class: e.g. android.widget.TextView
.decl viewClass(class: Class, v: ViewID)
.input viewClass

// https://developer.android.com/reference/android/view/View#attr_android:background
.decl background(color: Color, v: ViewID)
.input background

// https://developer.android.com/reference/android/view/View#attr_android:layoutHeight
.decl layoutHeight(dim: Dimension, v: ViewID)
.input layoutHeight

.decl layoutHeightSP(sp: SP, v: ViewID)
.input layoutHeightSP
.decl layoutHeightDIP(dip: DIP, v: ViewID)
.input layoutHeightDIP

// https://developer.android.com/reference/android/view/View#attr_android:layoutWidth
.decl layoutWidth(dim: Dimension, v: ViewID)
.input layoutWidth

.decl layoutWidthSP(sp: SP, v: ViewID)
.input layoutWidthSP
.decl layoutWidthDIP(dip: DIP, v: ViewID)
.input layoutWidthDIP

// https://developer.android.com/reference/android/widget/TextView#attr_android:textSize
.decl textSizeSP(sp: SP, v: ViewID)
.input textSizeSP
.decl textSizeDIP(dip: DIP, v: ViewID)
.input textSizeDIP

// TODO: factor it down into viewClass + not exists contentDescription?
// https://developer.android.com/reference/android/view/View#attr_android:contentDescription
.decl imageHasNoContentDescription(v: ViewID)
.input imageHasNoContentDescription

.decl textContent(t: String, v: ViewID)
.input textContent

// TODO: Factor it into
//   actionsButton(v: ViewID) :- actionText(t: String), text(v, t)
// actionText(t: String): t is a string that follow some pattern representing core app actions, e.g.
// including "continue", "exit" etc.
// NOTE: we emit this from analyzer directly because the text pattern is not easily expressibly in datalog
.decl actionButton(v: ViewID)
.input actionButton

.decl recordButton(v: ViewID)
.input recordButton

.decl buttonView(v: ViewID)
.input buttonView

.decl dialogView(v: ViewID, allocMethod: Method)
.input dialogView

//------ Spatial Properties ------//
// Constraint layout properties
// Second argument is a reference id to another widget or the parent
// (which will reference the parent container, i.e. the ConstraintLayout):
// https://developer.android.com/reference/android/support/constraint/ConstraintLayout

.decl layout_constraintEnd_toStartOf(u: ViewID, x: IdName)
.input layout_constraintEnd_toStartOf

.decl layout_constraintStart_toEndOf(u: ViewID, x: IdName)
.input layout_constraintStart_toEndOf

.decl layout_constraintEnd_toEndOf(u: ViewID, x: IdName)
.input layout_constraintEnd_toEndOf

.decl layout_constraintStart_toStartOf(u: ViewID, x: IdName)
.input layout_constraintStart_toStartOf

.decl layout_constraintBottom_toTopOf(u: ViewID, x: IdName)
.input layout_constraintBottom_toTopOf

.decl layout_constraintTop_toBottomOf(u: ViewID, x: IdName)
.input layout_constraintTop_toBottomOf

.decl layout_constraintBottom_toBottomOf(u: ViewID, x: IdName)
.input layout_constraintBottom_toBottomOf

.decl layout_constraintTop_toTopOf(u: ViewID, x: IdName)
.input layout_constraintTop_toTopOf

// Hierarchical relationship between views
.decl containsView(v: ViewID, u: ViewID)
.input containsView

//------ Temporal Properties ------//
// v is the root View (also called a Window) of Activity act
// act.setContentView(v)
.decl rootView(act: Class, v: ViewID)
.input rootView

// mainActivity is the activity that is launched at first
// <activity android:name="com.example.MainActivity">
//     <intent-filter>
//         <action android:name="android.intent.action.MAIN" />
//         <category android:name="android.intent.category.LAUNCHER" />
//     </intent-filter>
// </activity>
.decl mainActivity(act: Class)
.input mainActivity

.decl preferenceActivity(act: Class)
.input preferenceActivity

//*** Event handler properties ***//
// Event handler of view v is cb when event e happens
.decl eventHandler(e: Event, cb: Method, v: ViewID)
.input eventHandler

.decl activityEventHandler(e: Event, cb: Method, act: Class)
.input activityEventHandler

.decl intentFilter(action: Class, cb: Method)
.input intentFilter

//*** FIXME (too adhoc) ***//
// any callback that trigger interstitial ad by ad-network
.decl showInterstitialAd(cb: Method, ad: Method)
.input showInterstitialAd

// any callback that reaches general ad show API by ad-network
.decl showAd(cb: Method, ad: Method)
.input showAd

.decl showSuspiciousAd(cb: Method, ad: Method)
.input showSuspiciousAd

.decl showSuspiciousInterstitialAd(cb: Method, ad: Method)
.input showSuspiciousInterstitialAd

.decl setNPA(m: Method)
.input setNPA

.decl adViewClass(c: Class)
.input adViewClass

.decl adViewIdName(c: IdName)
.input adViewIdName

.decl serviceClass(c: Class)
.input serviceClass

.decl serviceClassLastName(c: Class, s: String)
.input serviceClassLastName

.decl loadGoogleConsentForm(m: Method, callsite: Method)
.input loadGoogleConsentForm

.decl readAudio(m: Method, callsite: Method)
.input readAudio

.decl downloadApp(m: Method, callsite: Method)
.input downloadApp

.decl invokesReflectiveAPI(m: Method, callsite: Method)
.input invokesReflectiveAPI

//*** View allocation site properties ***//
// callback cb of some activity will triagger allocation of Dialog view node v

//*** Lifecycle transition properties ***//
// Method will reach startActivity of some intent that views certain hosts
.decl startViewActivityOfSomeHosts(cb: Method, callsite: Method)
.input startViewActivityOfSomeHosts

.decl startViewActivityOfMarketHost(cb: Method, callsite: Method)
.input startViewActivityOfMarketHost

.decl startActivity(cb: Method, callsite: Method, act: Class)
.input startActivity

.decl finishActivity(cb: Method, callsite: Method, act: Class)
.input finishActivity

.decl showDialog(cb: Method, callsite: Method, dialog: ViewID)
.input showDialog

// .decl showSnackBar(v: ViewID, m: Method)
// .input showSnackBar
// .decl2 showSnackBar(v: ViewID, m: Method)
.decl setStatus(m: Method, callsite: Method)
.input setStatus

.decl loadWebViewUrl(m: Method, callsite: Method, url: String)
.input loadWebViewUrl

.decl lifecycleMethod(act: Class, methodName: String, method: Method)
.input lifecycleMethod

.decl setConsetInfoUpdateHandler(m1: Method, callsite: Method, m2: Method)
.input setConsetInfoUpdateHandler

// Dummy predicate to force Souffle explain output
.decl dummy(i: number)
.input dummy

//------------------ General derivations ------------------//

.decl entryView(v: ViewID, a: Class)
entryView(V, ACT) :- rootView(ACT, V), mainActivity(ACT).

.decl containsT(u: ViewID, v: ViewID)
containsT(X, Y) :- containsView(X, Y).
containsT(X, Z) :- containsT(X, Y), containsView(Y, Z).

.decl smallWidth(u: ViewID)
smallWidth(X) :- layoutWidthDIP(DIP, X), DIP < 3.

.decl FAB(u: ViewID)
FAB(X) :- viewClass("com.google.android.material.floatingactionbutton.FloatingActionButton", X).

.decl sameWidth(u: ViewID, v: ViewID)
sameWidth(U, V) :- containsView(U, V), layoutWidth("fill_parent", V).
sameWidth(U, V) :- sameWidth(U, W), sameWidth(W, V).

.decl sameHeight(u: ViewID, v: ViewID)
sameHeight(U, V) :- containsView(U, V), layoutHeight("fill_parent", V).
sameHeight(U, V) :- sameHeight(U, W), sameHeight(W, V).

.decl endToStartOf(left: ViewID, right: ViewID)
endToStartOf(U, V) :- idName(X, V), layout_constraintEnd_toStartOf(U, X).
.decl startToEndOf(right: ViewID, left: ViewID)
startToEndOf(U, V) :- idName(X, V), layout_constraintStart_toEndOf(U, X).
.decl endToEndOf(u: ViewID, v: ViewID)
endToEndOf(U, V) :- idName(X, V), layout_constraintEnd_toEndOf(U, X).
.decl startToStartOf(u: ViewID, v: ViewID)
startToStartOf(U, V) :- idName(X, V), layout_constraintStart_toStartOf(U, X).
.decl bottomToTopOf(top: ViewID, bot: ViewID)
bottomToTopOf(U, V) :- idName(X, V), layout_constraintBottom_toTopOf(U, X).
.decl topToBottomOf(bot: ViewID, top: ViewID)
topToBottomOf(U, V) :- idName(X, V), layout_constraintTop_toBottomOf(U, X).
.decl bottomToBottomOf(u: ViewID, v: ViewID)
bottomToBottomOf(U, V) :- idName(X, V), layout_constraintBottom_toBottomOf(U, X).
.decl topToTopOf(u: ViewID, v: ViewID)
topToTopOf(U, V) :- idName(X, V), layout_constraintTop_toTopOf(U, X).

// u ->|<- v
.decl rightToLeftOf(u: ViewID, v: ViewID)
rightToLeftOf(U, V) :- endToStartOf(U, V).
rightToLeftOf(U, V) :- startToEndOf(V, U).

.decl horizontalCentered(v: ViewID)
horizontalCentered(V) :- layout_constraintStart_toStartOf(V, "parent"),
                            layout_constraintEnd_toEndOf(V, "parent").

.decl verticalCentered(v: ViewID)
verticalCentered(V) :- layout_constraintTop_toTopOf(V, "parent"),
                        layout_constraintBottom_toBottomOf(V, "parent").

.decl centered(v: ViewID)
centered(V) :- verticalCentered(V), horizontalCentered(V).

// TODO: more cases
.decl overlapping(v: ViewID, u: ViewID)
overlapping(V1, V2) :- centered(V1), centered(V2), V1 != V2.

.decl adjacent(v: ViewID, u: ViewID)
adjacent(V, U) :- rightToLeftOf(V, U).
adjacent(V, U) :- rightToLeftOf(U, V).

.decl transitWindow(w1: ViewID, w2: ViewID)
transitWindow(W1, W2) :- entryView(W1, A1), containsT(W1, V), eventHandler(E, CB, V), finishActivity(CB, CS, A2), rootView(A2, W2), A1 != A2.

// FIXME: press_key should be refine to press_back by control-sensitivity
.decl backPressedHandler(cb: Method, act: Class)
backPressedHandler(CB, ACT) :- activityEventHandler("backPressed", CB, ACT).
backPressedHandler(CB, ACT) :- activityEventHandler("press_key", CB, ACT).

.decl dialogClickHandler(cb: Method, v: ViewID)
dialogClickHandler(CB, V) :- dialogView(V, M), containsT(V, U), eventHandler("click", CB, U).
